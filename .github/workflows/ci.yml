name: BlindspotX Auth CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check .

      - name: Check import sorting with isort
        run: |
          isort --check-only --profile black .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -r requirements.txt

      - name: Run Bandit security scanner
        run: |
          bandit -r app/ -x tests/

      - name: Check dependencies for vulnerabilities
        run: |
          safety check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          pytest --cov=app tests/ --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  docker-build:
    name: Build and Verify Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: blindspotx-auth:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image
        run: |
          docker run --name blindspotx -d -p 8000:8000 blindspotx-auth:latest
          sleep 5
          curl -s --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8000/api/health | grep -q "status.*ok"
          docker logs blindspotx
          docker stop blindspotx

  deploy:
    name: Deploy
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    needs: [docker-build]
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "API_URL=https://api.blindspotx.com" >> $GITHUB_ENV
            echo "USE_KEY_VAULT=true" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "API_URL=https://staging-api.blindspotx.com" >> $GITHUB_ENV
            echo "USE_KEY_VAULT=true" >> $GITHUB_ENV
          else
            echo "API_URL=https://dev-api.blindspotx.com" >> $GITHUB_ENV
            echo "USE_KEY_VAULT=false" >> $GITHUB_ENV
          fi

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.CONTAINER_REGISTRY }}/blindspotx-auth:${{ github.sha }},${{ secrets.CONTAINER_REGISTRY }}/blindspotx-auth:latest-${{ github.event.inputs.environment || 'dev' }}
          build-args: |
            ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
            API_URL=${{ env.API_URL }}

      - name: Deploy to Environment
        run: |
          echo "Deploying to ${{ github.event.inputs.environment || 'dev' }} environment"
          # Deployment commands would go here
          # This could use Azure CLI, Terraform, or other deployment tools

      - name: Verify Deployment Health
        run: |
          echo "Verifying health of deployment"
          # Example health check - replace with actual endpoint
          curl -s --retry 10 --retry-delay 10 --retry-connrefused ${{ env.API_URL }}/api/health | grep -q "status.*ok"

